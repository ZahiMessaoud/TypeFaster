/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * SecondFrame.java
 *
 * Created on 31 déc. 2015, 15:35:31
 */
package typeFaster.frames;

import java.awt.Color;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.JOptionPane;
import typeFaster.controler.SQLiteDbManager;
import typeFaster.entity.KeyWord;

/**
 *
 * @author M_Zahi
 */
public class SecondFrame extends javax.swing.JFrame implements Runnable {

    static ArrayList<KeyWord> keyWordsList = new ArrayList<KeyWord>();
    static List<Timer> timersList;
    static int level = 1;
    static int rest_time = 60;
    static int allow_errors = 3;
    static Timer timer1;
    static Timer timer2;
    static boolean soundsOn = true;
    static String lang;
    static String username;
    private static String[] trans_ar = {"المستوى", "عدد النقاط", "الوقت المتبقي", "الأخطاء المسموحة", "خروج"};
    private static String[] trans_fr = {"Niveau", "Points", "Temps", "Erreurs autorisés", "Quitter"};
    private static String[] trans_en = {"Level", "Points", "Time", "Allowed mistakes", "Exit"};

    /**
     * Creates new form SecondFrame
     *
     * @param lang
     * @param username
     */
    public SecondFrame(String lang, String username) {
        SecondFrame.lang = lang;
        SecondFrame.username = username;
        initComponents();
        name.setText(username);
        if ("AR".equals(lang)) {
            userLevelLabel.setText(trans_ar[0]);
            userPointsLabel.setText(trans_ar[1]);
            timerLabel.setText(trans_ar[2]);
            mistakesLabel.setText(trans_ar[3]);
            exitButton.setText(trans_ar[4]);
        } else if ("EN".equals(lang)) {
            userLevelLabel.setText(trans_en[0]);
            userPointsLabel.setText(trans_en[1]);
            timerLabel.setText(trans_en[2]);
            mistakesLabel.setText(trans_en[3]);
            exitButton.setText(trans_en[4]);
        } else if ("FR".equals(lang)) {
            userLevelLabel.setText(trans_fr[0]);
            userPointsLabel.setText(trans_fr[1]);
            timerLabel.setText(trans_fr[2]);
            mistakesLabel.setText(trans_fr[3]);
            exitButton.setText(trans_fr[4]);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        userInput = new javax.swing.JTextField();
        exitButton = new javax.swing.JButton();
        sounds = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        userLevelLabel = new javax.swing.JLabel();
        userLevel = new javax.swing.JLabel();
        userPointsLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        userPoints = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        timerLabel = new javax.swing.JLabel();
        timeRest = new javax.swing.JLabel();
        mistakesLabel = new javax.swing.JLabel();
        errors = new javax.swing.JLabel();
        name = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Exit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        top10 = new javax.swing.JMenuItem();
        restartButton = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        panel.setBackground(new java.awt.Color(-1,true));

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 530, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 326, Short.MAX_VALUE)
        );

        userInput.setFont(new java.awt.Font("Dialog", 1, 18));
        userInput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        userInput.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        userInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userInputActionPerformed(evt);
            }
        });
        userInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                userInputKeyReleased(evt);
            }
        });

        exitButton.setText("خروج");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        sounds.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/sound-on.png"))); // NOI18N
        sounds.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(-16777216,true), 1, true));
        sounds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soundsActionPerformed(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridLayout(8, 1));

        userLevelLabel.setFont(new java.awt.Font("Monospaced", 1, 14));
        userLevelLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userLevelLabel.setText("المستوى");
        jPanel1.add(userLevelLabel);

        userLevel.setFont(new java.awt.Font("Dialog", 1, 14));
        userLevel.setForeground(new java.awt.Color(-16776961,true));
        userLevel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userLevel.setText("1");
        jPanel1.add(userLevel);

        userPointsLabel.setFont(new java.awt.Font("Monospaced", 1, 14));
        userPointsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userPointsLabel.setText("عدد النقاط");
        jPanel1.add(userPointsLabel);

        jPanel2.setLayout(new java.awt.GridLayout(1, 2));

        userPoints.setFont(new java.awt.Font("Dialog", 1, 14));
        userPoints.setForeground(new java.awt.Color(-12566464,true));
        userPoints.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        userPoints.setText("0");
        jPanel2.add(userPoints);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/star.png"))); // NOI18N
        jPanel2.add(jLabel2);

        jPanel1.add(jPanel2);

        timerLabel.setFont(new java.awt.Font("Monospaced", 1, 14));
        timerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timerLabel.setText("الوقت المتبقي");
        jPanel1.add(timerLabel);

        timeRest.setFont(new java.awt.Font("Dialog", 1, 18));
        timeRest.setForeground(new java.awt.Color(-65536,true));
        timeRest.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timeRest.setText("60");
        jPanel1.add(timeRest);

        mistakesLabel.setFont(new java.awt.Font("Monospaced", 1, 14));
        mistakesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mistakesLabel.setText("الأخطاء المسموحة");
        jPanel1.add(mistakesLabel);

        errors.setFont(new java.awt.Font("Dialog", 1, 14));
        errors.setForeground(new java.awt.Color(-65281,true));
        errors.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        errors.setText("3");
        jPanel1.add(errors);

        name.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        name.setForeground(new java.awt.Color(-16776961,true));
        name.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        name.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(-4144960,true), 2, true));

        jMenu1.setText("File");

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        Exit.setText("Exit");
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Game");

        top10.setText("Top10");
        top10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                top10ActionPerformed(evt);
            }
        });
        jMenu2.add(top10);

        restartButton.setText("restart");
        restartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartButtonActionPerformed(evt);
            }
        });
        jMenu2.add(restartButton);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(name, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sounds, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userInput, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(userInput, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                        .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE))
                    .addComponent(sounds, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void userInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userInputActionPerformed
// TODO add your handling code here:
    checkUserInput();
}//GEN-LAST:event_userInputActionPerformed

private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
// TODO add your handling code here:
    this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    this.dispose();

}//GEN-LAST:event_exitButtonActionPerformed

private void soundsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soundsActionPerformed
// TODO add your handling code here:
    if (soundsOn) {
        sounds.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/sound-off.png"))); // NOI18N
        soundsOn = false;
    } else {
        sounds.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/sound-on.png"))); // NOI18N
        soundsOn = true;
    }

}//GEN-LAST:event_soundsActionPerformed

private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
// TODO add your handling code here:
    Thread th = new Thread(this);
    th.start();
}//GEN-LAST:event_formWindowOpened

private void userInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userInputKeyReleased
// TODO add your handling code here:

    checkSubstrings();

}//GEN-LAST:event_userInputKeyReleased

private void top10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_top10ActionPerformed
// TODO add your handling code here:
    ScoresTable top10Frame = new ScoresTable(lang);
    top10Frame.setVisible(true);

}//GEN-LAST:event_top10ActionPerformed

private void restartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartButtonActionPerformed
// TODO add your handling code here:
    for (int i = 0; i < keyWordsList.size(); i++) {
        keyWordsList.get(i).destroy(panel);
    }
    //stop timers
    timer1.cancel();
    timer2.cancel();
    restartGame();
}//GEN-LAST:event_restartButtonActionPerformed
    /**
     *
     */
    public static void createKeyWord() {

        final KeyWord keyWord = new KeyWord(lang);
        Timer timer = new Timer();
        keyWord.setTimer(timer);
        int begin = 1000; //timer starts after 1 second.
        int timeinterval = 1000 / level; //timer executes every 10 seconds.
        panel.add(keyWord);
        keyWordsList.add(keyWord);
        //timersList.add(timer);
        keyWord.getTimer().scheduleAtFixedRate(new TimerTask() {

            @Override
            public void run() {
                keyWord.move(panel);
                System.out.println("moving");
                if (checkKeyWordPostion(keyWord)) {
                    System.out.println("losing point");
                    keyWord.destroy(panel);
                    keyWordsList.remove(keyWord);
                    addError();
                }
            }
        }, begin, timeinterval);
    }

    /**
     *
     */
    public static void addPoint() {
        int points = 10 * level;
        userPoints.setText(Integer.toString(Integer.parseInt(userPoints.getText()) + points));
        if (soundsOn) {
            playSound("/sounds/notify.wav");
        }
    }

    /**
     *
     */
    public static void addError() {
        allow_errors--;
        errors.setText(Integer.toString(allow_errors));
        panel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(-65536, true), 1, true));
        userInput.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(-65536, true), 1, true));
        errors.setForeground(Color.red);
        if (soundsOn) {
            playSound("/sounds/part.wav");
        }
        Timer timer = new Timer();
        timer.schedule(new TimerTask() {

            @Override
            public void run() {
                panel.setBorder(null);
                errors.setForeground(Color.BLACK);
                userInput.setBorder(null);
            }
        }, 1000);

        if (allow_errors == 0) {
            System.out.println("Game Over");
            stopGame();
        }
    }

    /**
     *
     * @param keyWord
     * @return
     */
    public static boolean checkKeyWordPostion(KeyWord keyWord) {
        if ((keyWord.getPositionY() + keyWord.getHeight()) >= (panel.getY() + panel.getHeight())) {
            return true;
        }
        return false;
    }

    /**
     *
     */
    public static void checkUserInput() {
        String user_Input = userInput.getText();
        for (int i = 0; i < keyWordsList.size(); i++) {
            if (user_Input.equals(keyWordsList.get(i).getNonColoredText())) {
                System.out.println("correct Answer");
                destroyKeyWord(keyWordsList.get(i));
                userInput.setText("");
                addPoint();
                break;
            }
        }
    }

    /**
     *
     */
    public static void checkSubstrings() {
        String user_Input = userInput.getText();
        for (int i = 0; i < keyWordsList.size(); i++) {
            keyWordsList.get(i).checkIfSubstring(user_Input);
        }
    }

    /**
     *
     * @param keyword
     */
    public static void destroyKeyWord(final KeyWord keyword) {
        URL url = SecondFrame.class.getResource("/icons/star.png");
        javax.swing.ImageIcon icon = new javax.swing.ImageIcon(url.getPath());
        keyword.setText("+" + level * 10);
        keyword.setIcon(icon);
        keyWordsList.remove(keyword);
        Timer timer = new Timer();
        timer.schedule(new TimerTask() {

            @Override
            public void run() {
                keyword.destroy(panel);
            }
        }, 1000);
    }

    public static void startGame() {
        timer1 = new Timer();
        int begin = 1000; //timer starts after 1 second.
        int timeinterval = 10 / level * 1000; //timer executes every 10 seconds.
        timer1.scheduleAtFixedRate(new TimerTask() {

            @Override
            public void run() {
                createKeyWord();
                System.out.println("creation");
                //This code is executed at every interval defined by timeinterval (eg 10 seconds) 
                //And starts after x milliseconds defined by begin.
            }
        }, begin, timeinterval);

    }

    public static void stopGame() {
        //stop key words
        for (int i = 0; i < keyWordsList.size(); i++) {
            keyWordsList.get(i).destroy(panel);
        }
        //stop timers
        timer1.cancel();
        timer2.cancel();
        //Custom button text
        Object[] options = {"Yes, please", "No, thanks"};
        if (soundsOn) {
            playSound("/sounds/notice.wav");
        }
        int n = JOptionPane.showOptionDialog(null, "your score is " + userPoints.getText() + " point(s),\n would you like to restart game ?", "Game Over ", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        storeScoreInDB();
        if (n == 0) {
            restartGame();
        } else {
            userInput.setEnabled(false);
        }
    }

    /**
     *
     */
    public static void storeScoreInDB() {
        SQLiteDbManager.storePlayerScore(username, Integer.parseInt(userPoints.getText()), lang);
    }

    /**
     *
     */
    public static void pauseGame() {
        timer2.cancel();
        timer1.cancel();
        for (int i = 0; i < keyWordsList.size(); i++) {
            keyWordsList.get(i).destroy(panel);
        }
        Object[] options = {"Yes, please", "No, thanks"};
        if (soundsOn) {
            playSound("/sounds/notice.wav");
        }
        int n = JOptionPane.showOptionDialog(null, "رصيدك من النقاط " + userPoints.getText() + " نقطة ,\n هل تريد الإستمرار في اللعب؟", " لقد إجتزت المستوى " + Integer.toString(level) + " بنجاح", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if (n == 0) {
            moveToHightLevel();
        } else {
            userInput.setEnabled(false);
            storeScoreInDB();
        }
    }

    public static void moveToHightLevel() {
        level++;
        rest_time = 60;
        allow_errors = 3;
        setStartConfiguration();
        startGame();
    }

    public static void restartGame() {
        level = 1;
        userPoints.setText("0");
        rest_time = 60;
        allow_errors = 3;
        setStartConfiguration();
        startGame();
    }

    public static void setStartConfiguration() {

        //rest time
        timeRest.setText(Integer.toString(rest_time));
        timer2 = new Timer();
        timer2.scheduleAtFixedRate(new TimerTask() {

            @Override
            public void run() {
                int time = Integer.parseInt(timeRest.getText());
                time--;
                timeRest.setText(Integer.toString(time));
                if (time == 0) {
                    pauseGame();
                }
            }
        }, 1000, 2000);
        //allow errors
        errors.setText(Integer.toString(allow_errors));
        //level
        userLevel.setText(Integer.toString(level));
    }

    private static void playSound(String file) {
        try {
            Clip sound = AudioSystem.getClip();
            sound.open(AudioSystem.getAudioInputStream(
                    SecondFrame.class.getResource(file)));
            sound.start();
        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e1) {
            e1.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Exit;
    private static javax.swing.JLabel errors;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel mistakesLabel;
    private javax.swing.JLabel name;
    private static javax.swing.JPanel panel;
    private javax.swing.JMenuItem restartButton;
    private javax.swing.JButton sounds;
    private static javax.swing.JLabel timeRest;
    private javax.swing.JLabel timerLabel;
    private javax.swing.JMenuItem top10;
    private static javax.swing.JTextField userInput;
    private static javax.swing.JLabel userLevel;
    private javax.swing.JLabel userLevelLabel;
    private static javax.swing.JLabel userPoints;
    private javax.swing.JLabel userPointsLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        setStartConfiguration();
        startGame();
    }
}
